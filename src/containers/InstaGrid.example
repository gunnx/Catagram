import { useEffect, useState } from 'react'
import InfoPanel from '../components/InfoPanel'
import styled from 'styled-components'
import ActionBar from './ActionBar/ActionBar'
import Score from '../components/Score'

const chunkArray = (arr, size) =>
  arr.length > size
    // eslint-disable-next-line no-unused-vars
    ? [arr.slice(0, size), ...chunkArray(arr.slice(size), size)]
    : [arr]

const addDummyDataToNestedArray = (arrayGroup, subArrayLength) => {
  const newArray = [...arrayGroup]

  const lastArray = newArray.pop()
  if (lastArray.length === subArrayLength) {
    return arrayGroup
  } else {
    while (lastArray.length !== subArrayLength) {
      lastArray.push({ id: String(Math.random()) })
    }

    newArray.push(lastArray)
    return newArray
  }
}

const Grid = styled.div`
  display: flex;
  flex-direction: column;
`

const ImageRow = styled.div`
  display: flex;
  margin-bottom: 3px;
  
  @media (min-width: 735px) {
    margin-bottom: 36px;
  }
`

const Overlay = styled.div`
  height: 30px;
  background-color: rgba(0,0,0,0.5);
  position: absolute;
  bottom: 0;
  z-index: 1;
  left: 0;
  width: 100%;
  
  @media (min-width: 500px) {
    height: 50px;
  }
`

const ImageCard = styled.div`
  position: relative;
  display: block;
  width: 100%;
  flex: 1 0 0;
  margin-right: 3px;

  &:last-child {
    margin-right: 0;
  }

  @media (min-width: 735px) {
    margin-right: 36px;
  }
`

const ImageWrap = styled.div`
  overflow: hidden;
  padding-bottom: 100%;
`

const Image = styled.img`
  object-fit: cover;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
`

const CatScore = styled.div`
  position: absolute;
  top: 3px;
  right: 3px;
  box-shadow: 6px 9px 13px -6px #333;
`

const ImageGrid = (props) => {
  const { images = [] } = props
  const [imageRows, setImageRows] = useState([])

  useEffect(() => {
    if (images.length) {
      // get data into arrays of 3 items each
      const chunkedArray = chunkArray(images, 3)
      // fill any blank spaces in last row
      const finalArray = addDummyDataToNestedArray(chunkedArray, 3)
      setImageRows(finalArray)
    }
  }, [images])

  if (images.length === 0) {
    return <InfoPanel heading='No cats here!' description='Try uploading some using the upload button at the top of the screen' />
  }

  return imageRows.map((imageRow, index) => {
    return (
      <Grid key={index}>
        <ImageRow>
          {imageRow.map((image) => {
            return (
              <ImageCard key={image.id}>
                {image.url !== undefined && (
                  <>
                    <ImageWrap>
                      <Image src={image.url} alt={image.original_filename} />
                      <CatScore><Score value={15} size={20} /></CatScore>
                    </ImageWrap>
                    <Overlay>
                      <ActionBar />
                    </Overlay>
                  </>
                )}
              </ImageCard>
            )
          })}
        </ImageRow>
      </Grid>
    )
  })
}

export default ImageGrid
